Complete Naming Structure
datafactory_name: retail_data_platform
├── ecommerce_analytics_staging/
│   ├── staging_orders
│   └── staging_order_items
├── ecommerce_analytics_dimensions/
│   ├── dim_customers
│   ├── dim_products
│   └── dim_date
├── ecommerce_analytics_facts/
│   ├── fact_orders
│   └── fact_order_items

Architecture Overview
Client Input Tables (2 tables):

staging_orders - Where clients insert order header data
staging_order_items - Where clients insert order line item data

ETL-Managed Tables (6 tables):

Dimensions: dim_customers, dim_products, dim_date
Facts: fact_orders, fact_order_items
Control: etl_batch_control

Key Features

Upsert Architecture: Uses MERGE statements to handle INSERT, UPDATE, and DELETE operations efficiently in a single statement MssqltipsIntegrate, following best practices for data warehousing.
Batch Processing: Each ETL run is tracked with batch IDs for monitoring and data lineage.
Error Handling: Comprehensive error handling with rollback capabilities and status tracking.
Data Relationships: Proper foreign key relationships between fact and dimension tables following star schema design.
Realistic Schema: Based on e-commerce order management - a common real-world scenario with complex relationships.

ETL Process Flow

Clients insert data into staging_orders and staging_order_items
ETL process runs via sp_etl_master_process() which:

Processes customers (upserts into dim_customers)
Processes products (upserts into dim_products)
Processes orders (upserts into fact_orders)
Processes order items (upserts into fact_order_items)


Staging data is cleaned up after successful processing

The solution includes complete table definitions, relationships, stored procedures, sample data, and analytical query examples - everything needed for a production-ready ETL system with upsert capabilities.